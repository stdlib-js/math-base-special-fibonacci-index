{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport isInteger from '@stdlib/math-base-assert-is-integer';\nimport ln from '@stdlib/math-base-special-ln';\nimport round from '@stdlib/math-base-special-round';\nimport PHI from '@stdlib/constants-float64-phi';\nimport PINF from '@stdlib/constants-float64-pinf';\n\n\n// VARIABLES //\n\nvar SQRT_5 = 2.23606797749979;\nvar LN_PHI = ln( PHI );\n\n\n// MAIN //\n\n/**\n* Computes the Fibonacci number index.\n*\n* ## Notes\n*\n* -   We use `round` instead of `floor` due to errors introduced by floating-point precision.\n*\n* @param {NonNegativeInteger} F - Fibonacci number\n* @returns {NonNegativeInteger} Fibonacci number index\n*\n* @example\n* var n = fibonacciIndex( 0 );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndex( 1 );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndex( 2 );\n* // returns 3\n*\n* @example\n* var n = fibonacciIndex( 3 );\n* // returns 4\n*\n* @example\n* var n = fibonacciIndex( 5 );\n* // returns 5\n*\n* @example\n* var n = fibonacciIndex( 8 );\n* // returns 6\n*\n* @example\n* var n = fibonacciIndex( NaN );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndex( 3.14 );\n* // returns NaN\n*\n* @example\n* var n = fibonacciIndex( -1 );\n* // returns NaN\n*/\nfunction fibonacciIndex( F ) {\n\tvar x;\n\tif (\n\t\tisnan( F ) ||\n\t\tisInteger( F ) === false ||\n\t\tF <= 1 ||\n\t\tF === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tx = ( F*SQRT_5 ) + 0.5;\n\treturn round( ln( x ) / LN_PHI );\n}\n\n\n// EXPORTS //\n\nexport default fibonacciIndex;\n"],"names":["LN_PHI","ln","PHI","fibonacciIndex","F","isnan","isInteger","PINF","NaN","round"],"mappings":";;4jBAgCA,IACIA,EAASC,EAAIC,GAmDjB,SAASC,EAAgBC,GAExB,OACCC,EAAOD,KACY,IAAnBE,EAAWF,IACXA,GAAK,GACLA,IAAMG,EAECC,IAGDC,EAAOR,EA/DF,iBA8DNG,EAAa,IACKJ,EACzB"}